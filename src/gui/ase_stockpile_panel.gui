
types stockpile
{
    type stockpile_panel = flowcontainer {
        visible = "[GetGlobalVariable(Concatenate('ase_goods_can_be_stockpiled_', Goods.GetKey)).IsSet]"

        direction = vertical
        margin = { 10 0 }
        parentanchor = hcenter
        
        background = {
            using = entry_bg_simple
        }

        # Progress bar of market level reserves
        flowcontainer = {
            visible = "[And(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)0'), EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0'))]"
            
            margin = { 2 0 }
            margin_top = 20
            margin_bottom = 10

            default_progressbar_horizontal = {
                blockoverride "values" {
                    value = 0
                    min = 0
                    max = 1
                }
                size = { 516 25 }

                widget = {
                    size = { 100% 100% }

                    textbox = {
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 7 0 }
                        autoresize = yes
                        text = "ASE_MARKET_STOCKPILE"
                    }

                    textbox = {
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 200 0 }
                        autoresize = yes
                        raw_text = "['(CFixedPoint)0'|Dv] #variable +0.00#!"
                    }

                    textbox = {
                        position = { 350 0 }
                        raw_text = "#variable ['(CFixedPoint)0'|%0]#!"
                        parentanchor = left|vcenter
                        autoresize = yes
                        align = left|nobaseline
                    }

                    textbox = {
                        position = { -7 0 }
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_target_', Goods.GetKey)), '(CFixedPoint)10')|Dv]"
                        parentanchor = right|vcenter
                        autoresize = yes
                        align = right|nobaseline
                    }
                }
            }
        }
        
        flowcontainer = {
            visible = "[Or(Not(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)0')), Not(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0')))]"

            margin = { 2 0 }
            margin_top = 20
            margin_bottom = 10

            default_progressbar_horizontal = {
                blockoverride "values" {
                    value = "[GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_to_max_reserve_', Goods.GetKey))]"
                    min = 0
                    max = 1
                }
                size = { 516 25 }

                tooltipwidget = {
                    stockpile_tooltip_states_in_market = {}
                }

                widget = {
                    size = { 100% 100% }

                    textbox = {
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 7 0 }
                        autoresize = yes
                        text = "ASE_MARKET_STOCKPILE"
                    }

                    textbox = {
                        visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 200 0 }
                        autoresize = yes
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv] #variable +0.00#!"
                    }
                    textbox = {
                        visible = "[Not(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0'))]"
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 200 0 }
                        autoresize = yes
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv] [Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D]"
                    }

                    textbox = {
                        position = { 350 0 }
                        raw_text = "#variable [GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_to_max_reserve_', Goods.GetKey))|%0]#!"
                        parentanchor = left|vcenter
                        autoresize = yes
                        align = left|nobaseline
                    }

                    textbox = {
                        position = { -7 0 }
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_target_', Goods.GetKey)), '(CFixedPoint)10')|Dv]"
                        parentanchor = right|vcenter
                        autoresize = yes
                        align = right|nobaseline
                    }
                }
            }
        }

        # Progress bar of country level reserves.
        # Visible if it's market of player country, if there are some reserves on market level, and reserves on country
        # level do not equal 100% of reserves on market level.
        flowcontainer = {

            # Is the market of the player, the market has more than one country in it, there is some reserve in the
            # market, the player is either a junior market partner or market owner that doesn't have 100% of reserve.
            # visible = "[
            #     And(
            #         ObjectsEqual(GetPlayer.GetCapital.GetMarket, Goods.GetMarket),
            #         And(
            #             GreaterThan_CFixedPoint(
            #                 GuiScope.SetRoot(Goods.GetMarket.MakeScope).ScriptValue('ase_num_countries_in_market'),
            #                 '(CFixedPoint)1'
            #             ),
            #             And(
            #                 Not(
            #                     EqualTo_CFixedPoint(
            #                         GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)),
            #                         '(CFixedPoint)0'
            #                     )
            #                 ),
            #                 Or(
            #                     Not(
            #                         ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)
            #                     ),
            #                     Not(
            #                         EqualTo_CFixedPoint(
            #                             GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey)),
            #                             '(CFixedPoint)1'
            #                         )
            #                     )
            #                 )
            #             )
            #         )
            #     )
            # ]"

            visible = "[And(ObjectsEqual(GetPlayer.GetCapital.GetMarket, Goods.GetMarket), And(GreaterThan_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.MakeScope).ScriptValue('ase_num_countries_in_market'), '(CFixedPoint)1'), And(Not(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)0')), Or(Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)), Not(EqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey)), '(CFixedPoint)1'))))))]"

            margin = { 2 10 }

            default_progressbar_horizontal = {
                blockoverride "values" {
                    value = "[GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey))]"
                    min = 0
                    max = 1
                }
                size = { 516 25 }

                tooltipwidget = {
                    stockpile_tooltip_countries_in_market = {}
                }

                widget = {
                    size = { 100% 100% }

                    textbox = {
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 7 0 }
                        autoresize = yes
                        text = "ASE_COUNTRY_STOCKPILE"
                    }

                    textbox = {
                        visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 200 0 }
                        autoresize = yes
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv] #variable +0.00#!"
                    }
                    textbox = {
                        visible = "[Not(EqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_transfer_', Goods.GetKey)), '(CFixedPoint)0'))]"
                        parentanchor = left|vcenter
                        align = left|nobaseline
                        position = { 200 0 }
                        autoresize = yes
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv] [Multiply_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D]"
                    }

                    textbox = {
                        position = { 350 0 }
                        raw_text = "#variable [GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey))|%0]#!"
                        parentanchor = left|vcenter
                        autoresize = yes
                        align = left|nobaseline
                    }

                    textbox = {
                        position = { -7 0 }
                        raw_text = "[Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]"
                        parentanchor = right|vcenter
                        autoresize = yes
                        align = right|nobaseline
                    }
                }
            }
        }

        # Stockpile control panel
        flowcontainer = {
            visible = "[ObjectsEqual(GetPlayer.GetCapital.GetMarket, Goods.GetMarket)]"

            parentanchor = hcenter
            direction = horizontal
            spacing = 15

            flowcontainer = {
                direction = vertical
                
                stockpile_panel_policy = {}
                stockpile_panel_limit = {}
            }

            vertical_divider = {}

            flowcontainer = {
                direction = vertical

                stockpile_panel_saving_target = {}
                stockpile_panel_spending_target = {}
            }
        }

        widget = {
            size = { 10 10 }
        }
    }

    type stockpile_panel_policy = widget {
        size = { 245 48 }
        hbox = {                                            
            textbox = {
                autoresize = yes
                align = nobaseline
                text = "ASE_STOCKPILE_POLICY"
            }

            textbox = {
                layoutpolicy_horizontal = expanding
            }
            
            flowcontainer = {
                # Both saving and spending
                set_level_bar_item = {
                    visible = "[ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_both_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_MARKET_BOTH_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/trade_icons/unfocused.dds"
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }
                set_level_bar_item = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_both_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_COUNTRY_BOTH_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/trade_icons/unfocused.dds"
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }

                # Saving only
                set_level_bar_item = {
                    visible = "[ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_saving_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_MARKET_SAVING_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/trade_icons/import_focused.dds"
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }
                set_level_bar_item = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_saving_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_COUNTRY_SAVING_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/trade_icons/import_focused.dds"
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }

                # Spending only
                set_level_bar_item = {
                    visible = "[ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_spending_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_MARKET_SPENDING_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/trade_icons/export_focused.dds"
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }
                set_level_bar_item = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_spending_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_COUNTRY_SPENDING_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/trade_icons/export_focused.dds"
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }

                # None
                set_level_bar_item = {
                    visible = "[ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_none_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_MARKET_NONE_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/generic_icons/red_cross.dds"
                    }
                    blockoverride "texture_size" {
                        size = { 19 19 }
                    }
                    blockoverride "selected_texture_size" {
                        size = { 23 23 }
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }
                set_level_bar_item = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_toggle_direction_permission_none_', Goods.GetKey))]"
                    tooltip = "ASE_STOCKPILE_POLICY_COUNTRY_NONE_TOOLTIP"

                    blockoverride "button_texture" {
                        texture = "gfx/interface/icons/generic_icons/red_cross.dds"
                    }
                    blockoverride "texture_size" {
                        size = { 19 19 }
                    }
                    blockoverride "selected_texture_size" {
                        size = { 23 23 }
                    }
                    blockoverride "click" {
                        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible" {
                        visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
                    }
                    blockoverride "setvisible_2" {
                        visible = "[Not(ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    }
                }
            }
        }
    }

    type stockpile_panel_limit = widget {
        size = { 245 40 }
        hbox = {
            textbox = {
                autoresize = yes
                align = nobaseline
                text = "ASE_STOCKPILE_CAPACITY"
            }
            
            textbox = {
                layoutpolicy_horizontal = expanding
            }

            textbox = {
                autoresize = yes
                align = nobaseline
                raw_text = "[FixedPointToInt(Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_reserve_weeks_target_', Goods.GetKey)), '(CFixedPoint)0.24'))|v]"
            }
            textbox = {
                autoresize = yes
                margin_right = 7
                align = nobaseline
                text = "ASE_STOCKPILE_CAPACITY_MONTHS"
            }
            
            flowcontainer = {
                stockpile_panel_limit_decrease = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    tooltip = "ASE_STOCKPILE_NOT_OWNER"
                }
                stockpile_panel_limit_decrease = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)))]"
                    tooltip = "ASE_STOCKPILE_CAPACITY_LOWEST"
                }
                stockpile_panel_limit_decrease = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    tooltip = "ASE_STOCKPILE_CAPACITY_LOWER"
                }

                stockpile_panel_limit_increase = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    tooltip = "ASE_STOCKPILE_NOT_OWNER"
                }
                stockpile_panel_limit_increase = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)))]"
                    tooltip = "ASE_STOCKPILE_CAPACITY_HIGHEST"
                }
                stockpile_panel_limit_increase = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    tooltip = "ASE_STOCKPILE_CAPACITY_HIGHER"
                }
            }
        }
    }

    type stockpile_panel_limit_decrease = button_icon_round {
        datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_country_reserve_weeks_target_decrease_', Goods.GetKey))]"
        size = { 35 35 }
        enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

        blockoverride "icon" {
            texture = "gfx/interface/icons/generic_icons/profitability_01.dds"
        }
        blockoverride "icon_size" {
            size = { 23 23 }
        }
    }

    type stockpile_panel_limit_increase = button_icon_round {
        datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_country_reserve_weeks_target_increase_', Goods.GetKey))]"
        size = { 35 35 }
        enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

        blockoverride "icon" {
            texture = "gfx/interface/icons/generic_icons/profitability_13.dds"
        }
        blockoverride "icon_size" {
            size = { 23 23 }
        }
    }

    type stockpile_panel_saving_target = widget {
        size = { 245 48 }
        hbox = {
            textbox = {
                autoresize = yes
                align = left|nobaseline
                text = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING"
            }

            textbox = {
                layoutpolicy_horizontal = expanding
            }

            textbox = {
                autoresize = yes
                align = left|nobaseline
                margin_right = 6
                raw_text = "[GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_price_target_saving_', Goods.GetKey))|%0=-]"
            }

            flowcontainer = {
                stockpile_panel_saving_target_decrease = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    tooltip = "ASE_STOCKPILE_NOT_OWNER"
                }
                stockpile_panel_saving_target_decrease = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_LOWEST"
                }
                stockpile_panel_saving_target_decrease = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_LOWER"
                }

                stockpile_panel_saving_target_increase = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    tooltip = "ASE_STOCKPILE_NOT_OWNER"
                }
                stockpile_panel_saving_target_increase = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_HIGHEST"
                }
                stockpile_panel_saving_target_increase = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_HIGHER"
                }
            }
        }
    }

    type stockpile_panel_saving_target_decrease = button_icon_round {
        datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_country_price_target_saving_decrease_', Goods.GetKey))]"
        size = { 35 35 }
        enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

        blockoverride "icon" {
            texture = "gfx/interface/icons/generic_icons/coin_icon_07.dds"
        }
        blockoverride "icon_size" {
            size = { 21 21 }
        }
    }

    type stockpile_panel_saving_target_increase = button_icon_round {
        datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_country_price_target_saving_increase_', Goods.GetKey))]"
        size = { 35 35 }
        enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

        blockoverride "icon" {
            texture = "gfx/interface/icons/generic_icons/coin_icon_10.dds"
        }
        blockoverride "icon_size" {
            size = { 21 21 }
        }
    }

    type stockpile_panel_spending_target = widget {
        size = { 245 40 }
        hbox = {
            textbox = {
                autoresize = yes
                align = left|nobaseline
                text = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING"
            }

            textbox = {
                layoutpolicy_horizontal = expanding
            }

            textbox = {
                autoresize = yes
                align = left|nobaseline
                margin_right = 6
                raw_text = "[GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_price_target_spending_', Goods.GetKey))|%0=-]"
            }
            
            flowcontainer = {
                stockpile_panel_spending_target_decrease = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    tooltip = "ASE_STOCKPILE_NOT_OWNER"
                }
                stockpile_panel_spending_target_decrease = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_LOWEST"
                }
                stockpile_panel_spending_target_decrease = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_LOWER"
                }

                stockpile_panel_spending_target_increase = {
                    visible = "[Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner))]"
                    tooltip = "ASE_STOCKPILE_NOT_OWNER"
                }
                stockpile_panel_spending_target_increase = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), Not(ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_HIGHEST"
                }
                stockpile_panel_spending_target_increase = {
                    visible = "[And(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner), ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End))]"
                    tooltip = "ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_HIGHER"
                }
            }
        }
    }

    type stockpile_panel_spending_target_decrease = button_icon_round {
        datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_country_price_target_spending_decrease_', Goods.GetKey))]"
        size = { 35 35 }
        enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

        blockoverride "icon" {
            texture = "gfx/interface/icons/generic_icons/coin_icon_07.dds"
        }
        blockoverride "icon_size" {
            size = { 21 21 }
        }
    }

    type stockpile_panel_spending_target_increase = button_icon_round {
        datacontext = "[GetScriptedGui(Concatenate('ase_stockpile_country_price_target_spending_increase_', Goods.GetKey))]"
        size = { 35 35 }
        enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

        blockoverride "icon" {
            texture = "gfx/interface/icons/generic_icons/coin_icon_10.dds"
        }
        blockoverride "icon_size" {
            size = { 21 21 }
        }
    }

    type stockpile_market_panel_icon = icon {
        visible = "[GetGlobalVariable(Concatenate('ase_goods_can_be_stockpiled_', Goods.GetKey)).IsSet]"
        parentanchor = top|right
        size = { 25 25 }

        icon = {
            visible = "[GreaterThan_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"

            size = { 25 25 }
            parentanchor = center
            texture = "gfx/interface/buttons/round_button_big_wood_action.dds"
            tooltip = "ASE_STOCKPILE_ONGOING_TRANSFER_SAVING"

            icon = {
                size = { 17 17 }
                parentanchor = center
                texture = "gfx/interface/icons/trade_icons/import_focused.dds"
            }
        }

        icon = {
            visible = "[LessThan_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"

            size = { 25 25 }
            parentanchor = center
            texture = "gfx/interface/buttons/round_button_big_wood_action.dds"
            tooltip = "ASE_STOCKPILE_ONGOING_TRANSFER_SPENDING"

            icon = {
                size = { 17 17 }
                parentanchor = center
                texture = "gfx/interface/icons/trade_icons/export_focused.dds"
            }
        }

        icon = {
            visible = "[And(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0'), GreaterThan_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)0'))]"

            size = { 25 25 }
            parentanchor = center
            texture = "gfx/interface/buttons/round_button_big_wood_action.dds"
            tooltip = "ASE_STOCKPILE_NO_ONGOING_TRANSFER"

            icon = {
                size = { 13 13 }
                parentanchor = center
                texture = "gfx/interface/icons/generic_icons/generic_goods.dds"
            }
        }
    }

    type stockpile_tooltip_states_in_market = TooltipWidgetType {
        state = {
            name = _show
            on_start = "[GetScriptedGui(Concatenate('ase_stockpile_create_list_of_states_in_market_', Goods.GetKey)).Execute(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).End)]"
        }
        state = {
            name = _hide
            on_start = "[GetScriptedGui(Concatenate('ase_stockpile_clear_list_of_states_in_market_', Goods.GetKey)).Execute(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).End)]"
        }

        blockoverride "tooltip_content_after" {
            flowcontainer = {
                direction = vertical

                flowcontainer = {
                    textbox = {
                        autoresize = yes
                        align = left|nobaseline
                        text = "ASE_STOCKPILE_STATES_IN_MARKET"
                    }
                }

                flowcontainer = {

                    # Is the market of the player, the market has more than one country in it, there is some reserve in
                    # the market, the player has some reserve and thus states with the reserve, the player is either
                    # junior market partner or market owner that doesn't have 100% of reserve.
                    # visible = "[
                    #     And(
                    #         ObjectsEqual(GetPlayer.GetCapital.GetMarket, Goods.GetMarket),
                    #         And(
                    #             GreaterThan_CFixedPoint(
                    #                 GuiScope.SetRoot(Goods.GetMarket.MakeScope).ScriptValue('ase_num_countries_in_market'),
                    #                 '(CFixedPoint)1'
                    #             ),
                    #             And(
                    #                 Not(
                    #                     EqualTo_CFixedPoint(
                    #                         GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)),
                    #                         '(CFixedPoint)0'
                    #                     )
                    #                 ),
                    #                 And(
                    #                     Not(
                    #                         EqualTo_CFixedPoint(
                    #                             GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey)),
                    #                             '(CFixedPoint)0'
                    #                         )
                    #                     ),
                    #                     Or(
                    #                         Not(
                    #                             ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)
                    #                         ),
                    #                         Not(
                    #                             EqualTo_CFixedPoint(
                    #                                 GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey)),
                    #                                 '(CFixedPoint)1'
                    #                             )
                    #                         )
                    #                     )
                    #                 )
                    #             )
                    #         )
                    #     )
                    # ]"

                    visible = "[And(ObjectsEqual(GetPlayer.GetCapital.GetMarket, Goods.GetMarket), And(GreaterThan_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.MakeScope).ScriptValue('ase_num_countries_in_market'), '(CFixedPoint)1'), And(Not(EqualTo_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)0')), And(Not(EqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey)), '(CFixedPoint)0')), Or(Not(ObjectsEqual(GetPlayer, Goods.GetMarket.GetOwner)), Not(EqualTo_CFixedPoint(GuiScope.SetRoot(GetPlayer.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey)), '(CFixedPoint)1')))))))]"
                    
                    textbox = {
                        autoresize = yes
                        align = left|nobaseline

                        tooltipwidget = {
                            stockpile_tooltip_states_in_country = {}
                        }

                        text = "ASE_STOCKPILE_SHOW_STATES_IN_COUNTRY"
                    }
                }

                dynamicgridbox = {
                    datamodel = "[Goods.GetMarket.GetOwner.MakeScope.GetList(Concatenate('ase_stockpile_sgui_states_in_market_', Goods.GetKey))]"

                    item = {
                        flowcontainer = {
                            flowcontainer = {
                                datacontext = "[Scope.GetState]"

                                visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"

                                textbox = {
                                    autoresize = yes
                                    align = left|nobaseline
                                    raw_text = "#variable [Multiply_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]#! #variable +0.00#! (#variable [GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_to_market_reserve_', Goods.GetKey))|%0]#!): [State.GetName]"
                                }
                            }

                            flowcontainer = {
                                datacontext = "[Scope.GetState]"

                                visible = "[Not(EqualTo_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_transfer_', Goods.GetKey)), '(CFixedPoint)0'))]"

                                textbox = {
                                    autoresize = yes
                                    align = left|nobaseline
                                    raw_text = "#variable [Multiply_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]#! [Multiply_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D] (#variable [GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_to_market_reserve_', Goods.GetKey))|%0]#!): [State.GetName]"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type stockpile_tooltip_states_in_country = TooltipWidgetType {
        state = {
            name = _show
            on_start = "[GetScriptedGui(Concatenate('ase_stockpile_create_list_of_states_in_country_', Goods.GetKey)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        }
        state = {
            name = _hide
            on_start = "[GetScriptedGui(Concatenate('ase_stockpile_clear_list_of_states_in_country_', Goods.GetKey)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        }

        blockoverride "tooltip_content_after" {
            flowcontainer = {
                direction = vertical

                flowcontainer = {
                    textbox = {
                        autoresize = yes
                        align = left|nobaseline
                        text = "ASE_STOCKPILE_STATES_IN_COUNTRY"
                    }
                }

                dynamicgridbox = {
                    datamodel = "[GetPlayer.MakeScope.GetList(Concatenate('ase_stockpile_sgui_states_in_country_', Goods.GetKey))]"

                    item = {
                        flowcontainer = {
                            flowcontainer = {
                                datacontext = "[Scope.GetState]"

                                visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"

                                textbox = {
                                    autoresize = yes
                                    align = left|nobaseline
                                    raw_text = "#variable [Multiply_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]#! #variable +0.00#! (#variable [GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_to_country_reserve_', Goods.GetKey))|%0]#!): [State.GetName]"
                                }
                            }

                            flowcontainer = {
                                datacontext = "[Scope.GetState]"

                                visible = "[Not(EqualTo_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_transfer_', Goods.GetKey)), '(CFixedPoint)0'))]"

                                textbox = {
                                    autoresize = yes
                                    align = left|nobaseline
                                    raw_text = "#variable [Multiply_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]#! [Multiply_CFixedPoint(GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D] (#variable [GuiScope.SetRoot(State.MakeScope).ScriptValue(Concatenate('ase_stockpile_state_to_country_reserve_', Goods.GetKey))|%0]#!): [State.GetName]"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type stockpile_tooltip_countries_in_market = TooltipWidgetType {
        state = {
            name = _show
            on_start = "[GetScriptedGui(Concatenate('ase_stockpile_create_list_of_countries_in_market_', Goods.GetKey)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        }
        state = {
            name = _hide
            on_start = "[GetScriptedGui(Concatenate('ase_stockpile_clear_list_of_countries_in_market_', Goods.GetKey)).Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
        }

        blockoverride "tooltip_content_after" {
            flowcontainer = {
                direction = vertical

                flowcontainer = {
                    textbox = {
                        autoresize = yes
                        align = left|nobaseline
                        text = "ASE_STOCKPILE_COUNTRIES_IN_MARKET"
                    }
                }
                dynamicgridbox = {
                    datamodel = "[GetPlayer.MakeScope.GetList(Concatenate('ase_stockpile_sgui_countries_in_market_', Goods.GetKey))]"

                    item = {
                        flowcontainer = {
                            flowcontainer = {
                                datacontext = "[Scope.GetCountry]"

                                visible = "[EqualTo_CFixedPoint(GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_transfer_', Goods.GetKey)), '(CFixedPoint)0')]"

                                textbox = {
                                    autoresize = yes
                                    align = left|nobaseline
                                    raw_text = "#variable [Multiply_CFixedPoint(GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]#! #variable +0.00#! (#variable [GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey))|%0]#!): [Country.GetName]"
                                }
                            }

                            flowcontainer = {
                                datacontext = "[Scope.GetCountry]"

                                visible = "[Not(EqualTo_CFixedPoint(GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_transfer_', Goods.GetKey)), '(CFixedPoint)0'))]"

                                textbox = {
                                    autoresize = yes
                                    align = left|nobaseline
                                    raw_text = "#variable [Multiply_CFixedPoint(GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv]#! [Multiply_CFixedPoint(GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D] (#variable [GuiScope.SetRoot(Country.MakeScope).ScriptValue(Concatenate('ase_stockpile_country_to_market_reserve_', Goods.GetKey))|%0]#!): [Country.GetName]"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
