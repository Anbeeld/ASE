# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types goods_panel_types
{
	type goods_panel = default_block_window_two_lines {
		name = "goods_panel"

		state = {
            name = _show
            on_start = "[GetVariableSystem.Clear('stockpile_panel_section_goods_policy')]"
            on_start = "[GetVariableSystem.Clear('stockpile_panel_section_default_policy')]"
            on_start = "[GetVariableSystem.Clear('stockpile_panel_section_state_policy')]"

            on_start = "[GetVariableSystem.Toggle('stockpile_panel_section_goods_policy')]"

			on_start = "[GetVariableSystem.Clear('limit_default_reset_reset_confirm')]"
			on_start = "[GetVariableSystem.Clear('saving_target_default_reset_confirm')]"
			on_start = "[GetVariableSystem.Clear('spending_target_default_reset_confirm')]"
			on_start = "[GetVariableSystem.Clear('state_reset_all_goods_confirm')]"
        }
		
		blockoverride "window_header_name"
		{
			text = "[GoodsPanel.GetGoods.GetName]"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "GOODS_PANEL_LINE_TWO"
		}
		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[GoodsPanel.AccessGoods.AccessMarket]"
				size = { 30 30 }
				onclick = "[InformationPanelBar.OpenMarketPanel(GoodsPanel.AccessGoods.AccessMarket)]"
				tooltip = "GO_TO_BUTTON_MARKET"
				input_action = "go_to_details"
			}
		}

		blockoverride "pin_visibility" {
			visible = "[And(GoodsPanel.AccessGoods.HasMarketContext, GoodsPanel.AccessGoods.GetMarket.GetOwner.IsLocalPlayer)]"
		}

		blockoverride "pin_properties" {
			visible = "[GoodsPanel.AccessGoods.IsPinnedInOutliner]"
			onclick = "[GoodsPanel.AccessGoods.TogglePinInOutliner]"
			datacontext = "[GoodsPanel.AccessGoods]"
			tooltip = "GOODS_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(GoodsPanel.AccessGoods.IsPinnedInOutliner)]"
			onclick = "[GoodsPanel.AccessGoods.TogglePinInOutliner]"
			datacontext = "[GoodsPanel.AccessGoods]"
			tooltip = "GOODS_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
		}
		
		blockoverride "fixed_top"{

			tab_buttons = {
				
				# OBS! these 4 tabs are copied to goods_panel.gui / goods_usage_panel.gui / goods_state_panel.gui / goods_local_prices_panel.gui
				# consider merging these panels into the same panel

				# market (SELECTED)
				blockoverride "first_button_selected" {
					text = "[GoodsPanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "first_button_visibility" {
					visible = yes
				}
				
				# selected state
				blockoverride "second_button" {
					text = "[GoodsPanel.GetGoods.GetState.GetNameNoFormatting]"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "[GoodsPanel.GetGoods.GetState.GetNameNoFormatting]"
				} 
				blockoverride "second_button_visibility_checked" {
					visible = "[GoodsPanel.GetGoods.HasStateContext]"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsStatePanel( GoodsPanel.GetGoods.GetState, GoodsPanel.GetGoods )]"
				}

				# states in market
				blockoverride "third_button" {
					text = "LOCAL_PRICES"
				}
				blockoverride "third_button_tooltip" {
					tooltip = "LOCAL_PRICES"
				} 					
				blockoverride "third_button_visibility_checked" {
					visible = yes
				}			
				blockoverride "third_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsLocalPricesPanel(GoodsPanel.GetGoods)]"
				}	
				
				# usage / application
				blockoverride "fourth_button" {
					text = USAGE
				}
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsUsagePanel(GoodsPanel.GetGoods)]"
				}
				blockoverride "fourth_button_visibility_checked" {
					visible = yes
				}
			}
		}

		blockoverride "fixed_bottom"{
			flowcontainer = {
				direction = vertical
				spacing = 5

				divider_clean = {
					size = { @panel_width_plus_14 4 }
				}

				background = {
					using = dark_area
				}

				flowcontainer = {
					parentanchor = hcenter
					direction = horizontal
					spacing = 10
					datacontext = "[GoodsPanel.AccessGoods]"
					margin_top = 5

					button = {
						visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Goods.HasImportExportControl))]"
					
						using = default_button_map_interaction
						size = { 260 70 }
						
						icon = {
							texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
							size = { 40 40 }
							position = { 0 3 }
							parentanchor = hcenter
						}
						textbox = {
							text = "NEW_IMPORT_ROUTE"
							size = { 100% 30 }
							position = { 0 -3 }
							parentanchor = bottom
							margin = { 10 0 }
							elide = right
							align = center|nobaseline
						}
						
						using = shimmer
						blockoverride "shimmer_visibility" {
							visible = "[Goods.CanEstablishImportTradeRoute]"
						}
						enabled = "[Goods.CanEstablishImportTradeRoute]"
						onclick = "[Goods.EstablishImportTradeRoute]"
						tooltip = "ESTABLISH_IMPORT_ROUTE_TOOLTIP"
					}

					button = {
						visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Goods.HasImportExportControl))]"
					
						using = default_button_map_interaction
						size = { 260 70 }
						
						icon = {
							texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
							size = { 40 40 }
							position = { 0 3 }
							parentanchor = hcenter
						}
						textbox = {
							text = "NEW_EXPORT_ROUTE"
							size = { 100% 30 }
							position = { 0 -3 }
							parentanchor = bottom
							margin = { 10 0 }
							elide = right
							align = center|nobaseline
						}
						
						using = shimmer
						blockoverride "shimmer_visibility" {
							visible = "[Goods.CanEstablishExportTradeRoute]"
						}
						enabled = "[Goods.CanEstablishExportTradeRoute]"
						onclick = "[Goods.EstablishExportTradeRoute]"
						tooltip = "ESTABLISH_EXPORT_ROUTE_TOOLTIP"
					}

					button = {
						visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Not(Goods.HasImportExportControl)))]"
						
						using = default_button_map_interaction
						size = { 260 70 }
						
						icon = {
							texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
							size = { 40 40 }
							position = { 0 3 }
							parentanchor = hcenter
						}
						textbox = {
							text = "NEW_IMPORT_ROUTE_TO_PLAYER"
							size = { 100% 30 }
							position = { 0 -3 }
							parentanchor = bottom
							margin = { 10 0 }
							elide = right
							align = center|nobaseline
						}
						
						enabled = "[IsValid(Goods.EstablishTradeRouteWithPlayerMarket('(bool)yes'))]"
						onclick = "[Execute(Goods.EstablishTradeRouteWithPlayerMarket('(bool)yes'))]"
						tooltip = "ESTABLISH_IMPORT_ROUTE_TO_PLAYER_MARKET_TOOLTIP"
					}

					button = {
						visible = "[And(Goods.IsTradeable, And(Goods.HasMarketContext, Not(Goods.HasImportExportControl)))]"
						
						using = default_button_map_interaction
						size = { 260 70 }
						
						icon = {
							texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
							size = { 40 40 }
							position = { 0 3 }
							parentanchor = hcenter
						}
						textbox = {
							text = "NEW_EXPORT_ROUTE_FROM_PLAYER"
							size = { 100% 30 }
							position = { 0 -3 }
							parentanchor = bottom
							margin = { 10 0 }
							elide = right
							align = center|nobaseline
						}
						
						enabled = "[IsValid(Goods.EstablishTradeRouteWithPlayerMarket('(bool)no'))]"
						onclick = "[Execute(Goods.EstablishTradeRouteWithPlayerMarket('(bool)no'))]"
						tooltip = "ESTABLISH_EXPORT_ROUTE_FROM_PLAYER_MARKET_TOOLTIP"
					}
				}

				widget = {
					size = { 5 5 }
				}
			}
		}
		
		blockoverride "bottom_spacing" {}

		blockoverride "scrollarea_content"
		{
			container = {
				parentanchor = hcenter
				
				flowcontainer = {
					margin_top = 10
					minimumsize = { @panel_width -1 }
					using = default_list_position
					direction = vertical
					datacontext = "[GoodsPanel.AccessGoods]"

					container = {
						parentanchor = hcenter
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						
						good_icon_and_prize = {}

						map_modes_minimized = {
							parentanchor = right

							blockoverride "first_button_click" {
								onclick = "[GoodsPanel.ShowGoodsLocalPrices]"
							}
							blockoverride "first_button_selected" {
								visible = "[GoodsPanel.IsShowingGoodsLocalPrices]"
							}
							blockoverride "first_button_not_selected" {
								visible = "[Not(GoodsPanel.IsShowingGoodsLocalPrices)]"
							}
							blockoverride "first_button_icon" {
								texture = "gfx/interface/icons/generic_icons/money.dds"
							}
							blockoverride "first_button_text" {
								text = "MAP_MODE_LOCAL_PRICES"
							}
							
							blockoverride "second_button_click" {
								onclick = "[GoodsPanel.ShowGoodsPotentials]"
							}
							blockoverride "second_button_selected" {
								visible = "[GoodsPanel.IsShowingGoodsPotentials]"
							}
							blockoverride "second_button_not_selected" {
								visible = "[Not(GoodsPanel.IsShowingGoodsPotentials)]"
							}
							blockoverride "second_button_icon" {
								texture = "gfx/interface/icons/map_mode_icons/potentials.dds"
							}
							blockoverride "second_button_text" {
								text = "MAP_MODE_POTENTIALS"
							}

							blockoverride "third_button_click" {
								onclick = "[GoodsPanel.ShowGoodsProduction]"
							}
							blockoverride "third_button_selected" {
								visible = "[GoodsPanel.IsShowingGoodsProduction]"
							}
							blockoverride "third_button_not_selected" {
								visible = "[Not(GoodsPanel.IsShowingGoodsProduction)]"
							}
							blockoverride "third_button_icon" {
								texture = "gfx/interface/icons/map_mode_icons/production.dds"
							}
							blockoverride "third_button_text" {
								text = "MAP_MODE_PRODUCTION"
							}

							blockoverride "fourth_button_click" {
								onclick = "[GoodsPanel.ShowGoodsConsumption]"
							}
							blockoverride "fourth_button_selected" {
								visible = "[GoodsPanel.IsShowingGoodsConsumption]"
							}
							blockoverride "fourth_button_not_selected" {
								visible = "[Not(GoodsPanel.IsShowingGoodsConsumption)]"
							}
							blockoverride "fourth_button_icon" {
								texture = "gfx/interface/icons/map_mode_icons/consumption.dds"
							}
							blockoverride "fourth_button_text" {
								text = "MAP_MODE_CONSUMPTION"
							}
						}
					}
					
					widget = { size = { 10 10 }}

					stockpile_panel_market = {}
					
					widget = { size = { 10 10 }}
					
					widget = {
						size = { @panel_width 60 }
						parentanchor = hcenter
						
						background = {
							using = entry_bg_simple
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10
							margin = { 10 0 }
							
							textbox = {
								autoresize = yes
								align = nobaseline
								text = "BUDGET_TARIFFS"
							}
							
							container = {
								name = "tutorial_highlight_market_goods_policy"
								set_level_bar_market_tariffs = {}
							}
							
							textbox = {
								layoutpolicy_horizontal = expanding
								align = right|nobaseline
								text = "BUDGET_CONSUMPTION_TAXES"
							}
							
							consumption_tax_button_toggle = {
								visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket))]"
								
								blockoverride "tooltip" {
									tooltip = "NOT_PLAYER_MARKET_CONSUMPTION_TAXES"
								}

								blockoverride "enabled" {
									enabled = no
								}
							}

							consumption_tax_button_toggle = {
								visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket)]"
							}
						}
					}
						
					### GRAPH LINE
					v3_plotline = {
						using = default_list_position

						blockoverride "size" {
							size = { 360 100 }
						}
						blockoverride "header" {
							text = "PRICE"
						}
						blockoverride "line_color" {
							color = { .9 .9 .9 1.0 }
						}
						blockoverride "line_plotpoints" {
							visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
							plotpoints = "[GetTrendPlotPointsNormalized( Goods.GetPriceTrend, Goods.GetMinPrice, Goods.GetMaxPrice )]"
						}
						blockoverride "maxvalue" {
							raw_text = "@money![Goods.GetMaxPrice]"
						}
						blockoverride "minvalue" {
							raw_text = "@money![Goods.GetMinPrice]"
						}
						blockoverride "startdate" {
							text = "[GetOldestDate(Goods.GetPriceTrend)]"
						}
						blockoverride "enddate" {
							text = "[GetLatestDate(Goods.GetPriceTrend)]"
						}
						blockoverride "multiitem" {}
						
						blockoverride "extra_plotlines" {
							### Base Price line
							plotline = {
								size = { 100% 100% }
								using = plot_line
								width = 1
								color = { 0.2 0.2 0.9 1.0 }
								plotpoints = "[Goods.GetBasePricePlotPoints]"
							}
						}
						blockoverride "empty_state_visibility" {
							visible = "[IsEmpty(Goods.GetPriceTrend)]"
						}

						blockoverride "everything_that_is_not_empty_state_visibility" {
							visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
						}

						blockoverride "empty_state_text" {
							text = "GRAPH_NOT_INITIALIZED"
						}
					}

					### BOUGHT BY / SOLD BY
					flowcontainer = {
						margin_top = 10
						using = default_list_position
						
						### SOLD BY LIST
						market_orders_list = {}
						
						vertical_divider_full = {}
						
						### BOUGHT BY LIST
						market_orders_list = {
							blockoverride "header_text" {
								text = "BOUGHT_BY"
							}
							blockoverride "alpha_summary_orders" {
								alpha = "[TransparentIfZero(GoodsPanel.AccessOutputValuesTotal)]"
							}
							blockoverride "label_summary_orders" {
								text = "BUY_ORDERS"
							}
							blockoverride "label_tooltip_orders" {
								tooltip = "GOODS_MARKET_BUY_ORDERS_BREAKDOWN"
							}							
							blockoverride "value_summary_orders" {
								text = "[GoodsPanel.AccessOutputValuesTotal|D]"
							}
							blockoverride "datamodel_orders" {
								datamodel = "[GoodsPanel.AccessOutputValues]"
							}
						}
					}

					flowcontainer = {
						datacontext = "[GoodsPanel.GetMarketGoods]"
						visible = "[Goods.IsTradeable]"
						direction = vertical
						parentanchor = hcenter
						
						widget = {
							size = { 1 20 }
						}

						default_header = {
							parentanchor = hcenter
							blockoverride "text"
							{
								text = "TRADE_ROUTES"
							}
						}


						empty_state = {
							blockoverride "visible" {
								visible = "[And(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes), IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes))]"
							}
							blockoverride "text" {
								text = "NO_TRADE_ROUTES"
							}
						}

						flowcontainer = {
							direction = vertical
							parentanchor = hcenter
							margin_bottom = 5
							margin_top = 10
							max_width = 540
							min_width = 540
							visible = "[Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes))]"

							background = {
								using = dropdown_background

								modify_texture = {
									texture = "gfx/interface/masks/fade_vertical_top.dds"
									blend_mode = alphamultiply
									alpha = 1
								}
							}

							textbox = {
								text = "TRADE_ROUTE_PLAYER"
								autoresize = yes
								align = left|nobaseline
								margin_left = 15
								margin_bottom = 5
							}

							datamodel = "[MarketGoods.AccessPlayerTradeRoutes]"

							item = {
								trade_route_list_item = {
									datacontext = "[MarketGoods.GetMarket]"

									blockoverride "first_flag_or_icon" {
										icon = {
											datacontext = "[TradeRoute.GetGoods]"
											texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
											size = { 55 55 }
											color = "[Goods.GetCategoryColor]"

											tooltipwidget = {
												FancyTooltip_Goods = {}
											}
											
											icon = {
												texture = "[Goods.GetTexture]"
												size = { 40 40 }
												parentanchor = center
											}
											icon = {
												size = { 25 25 }
												visible = "[Goods.HasGoodsShortage]"
												texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
												tooltip = "GOODS_SHORTAGE_TOOLTIP"
												parentanchor = bottom
											}
										}
									}
								}
							}
						}

						divider_decorative = {
							visible = "[And(Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes)), Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)))]"
						}

						flowcontainer = {
							direction = vertical
							parentanchor = hcenter
							margin_bottom = 5
							margin_top = 10
							max_width = 540
							min_width = 540
							visible = "[Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes))]"

							background = {
								using = dropdown_background

								modify_texture = {
									texture = "gfx/interface/masks/fade_vertical_top.dds"
									blend_mode = alphamultiply
									alpha = 1
								}
							}

							textbox = {
								text = "OTHER_COUNTRIES_TRADE_ROUTES"
								autoresize = yes
								align = left|nobaseline
								margin_left = 15
								margin_bottom = 5
							}

							datamodel = "[MarketGoods.AccessOthersTradeRoutes]"
							item = {
							   trade_route_list_item = {
									datacontext = "[MarketGoods.GetMarket]"

									blockoverride "first_flag_or_icon" {
										icon = {
											datacontext = "[TradeRoute.GetGoods]"
											texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
											size = { 55 55 }
											color = "[Goods.GetCategoryColor]"

											tooltipwidget = {
												FancyTooltip_Goods = {}
											}
											
											icon = {
												texture = "[Goods.GetTexture]"
												size = { 40 40 }
												parentanchor = center
											}
											icon = {
												size = { 25 25 }
												visible = "[Goods.HasGoodsShortage]"
												texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
												tooltip = "GOODS_SHORTAGE_TOOLTIP"
												parentanchor = bottom
											}
										}
									}
								}
							}
						}
					}
				}
				
				not_yet_initialized = {
					visible = "[EqualTo_CFixedPoint(GoodsPanel.GetGoods.GetMarketPrice, '(CFixedPoint)0')]"
				}
			}
		}
	}
}
