l_japanese:
 ASE_STOCKPILE_WORD:0 "Stockpile"
 ASE_INPUT_WORD:0 "Input"
 ASE_OUTPUT_WORD:0 "Output"
 ASE_SAVING_WORD:0 "Saving"
 ASE_SPENDING_WORD:0 "Spending"

 concept_ase_mod_description:0 "Anbeeld's Stockpile Economy"
 concept_ase_mod_description_desc:0 "Anbeeld's Stockpile Economy is a mod that makes it possible to [Concept('concept_ase_market_stockpile', 'Stockpile')] all types of [Concept('concept_good', 'Goods')], both for players and for AI."

 concept_ase_market_stockpile:0 "Market Stockpile"
 concept_ase_market_stockpile_desc:0 "#bold Stockpiling#! of [Concept('concept_good', 'Goods')] means creating a [Concept('concept_ase_stockpile_reserve', 'Reserve')] of them, which is done through government [Concept('concept_ase_stockpile_transfer', 'Saving')] [Concept('concept_good', 'Goods')] by automatically buying them from the [concept_market] when their [Concept('concept_market_price', 'Prices')] are below [Concept('concept_ase_stockpile_price_target', 'Saving Price Target')].\n\nLikewise, when the [Concept('concept_market_price', 'Price')] is above [Concept('concept_ase_stockpile_price_target', 'Spending Price Target')], #bold Stockpile#! will automatically sell [Concept('concept_good', 'Goods')] to the [concept_market] until the [Concept('concept_ase_stockpile_price_target', 'Target')] is reached, which means [Concept('concept_ase_stockpile_transfer', 'Spending')] won't allow [Concept('concept_market_price', 'Prices')] to raise further.\n\n#bold Stockpiles#! are stored on a [Concept('concept_state', 'State')] basis. When a [concept_country] loses a [Concept('concept_state', 'State')], it loses the entirety of its #bold Stockpile#! as well.\n\nIn [Concept('concept_market', 'Markets')] with multiple members the stockpile of each [concept_country] is shared with the others, while [concept_ase_stockpile_policy] is controlled by the [concept_market_owner]. Other members can only agree to #bold Stockpile#! [Concept('concept_good', 'Goods')] on terms set by [concept_market_owner] or opt out."
 
 concept_ase_country_stockpile:0 "Country Stockpile"
 concept_ase_country_stockpile_desc:0 "The amount of [Concept('concept_good', 'Goods')] that are [Concept('concept_ase_market_stockpile', 'Stockpiled')] in your [concept_country] only compared to the whole [concept_ase_market_stockpile]. For [Concept('concept_junior_partner', 'Junior Market Partners')] it is limited to [Concept('concept_ase_stockpile_capacity', 'Stockpile Capacity')] of the [concept_market] multiplied by [concept_market_share] of the [concept_country].\n\nLeaving the [concept_market] would mean losing access to its shared [concept_ase_market_stockpile], but #bold Country Stockpile#! will remain yours no matter what."

 concept_ase_state_stockpile:0 "State Stockpile"
 concept_ase_state_stockpile_desc:0 "The amount of [Concept('concept_good', 'Goods')] that are [Concept('concept_ase_market_stockpile', 'Stockpiled')] in a certain [concept_state] only compared to the whole [concept_ase_country_stockpile].\n\nLosing the [concept_state] would mean losing access to its #bold State Stockpile#!."
 
 concept_ase_stockpile_transfer:0 "Stockpile Transfer"
 concept_ase_stockpile_transfer_desc:0 "A change in a [concept_ase_stockpile_reserve], either #bold Saving#! which means buying [Concept('concept_good', 'Goods')] to fill the [Concept('concept_ase_market_stockpile', 'Stockpile')], or #bold Spending#! which means selling [Concept('concept_good', 'Goods')] to the [concept_market] to control their [concept_market_price].\n\nIn [Concept('concept_market', 'Markets')] with multiple members #bold Saving Transfers#! are split among all the [Concept('concept_country', 'Countries')] in the [concept_market] based on their [concept_market_share], while #bold Spending Transfers#! are split proportionally with [concept_ase_country_stockpile]."
 
 concept_ase_stockpile_reserve:0 "Stockpile Reserve"
 concept_ase_stockpile_reserve_desc:0 "The amount of [Concept('concept_good', 'Goods')] stored in a [Concept('concept_ase_market_stockpile', 'Stockpile')] of a [concept_market], a [concept_country] or a [concept_state], which can be used at any point to prevent [Concept('concept_market_price', 'Market Prices')] from rising too high when supply doesn't meet demand.\n\n#bold Reserve#! cannot be higher than #bold 200%#! of the maximum [concept_ase_stockpile_capacity] available, with all excess [Concept('concept_good', 'Goods')] being lost after some time."
 
 concept_ase_stockpile_policy:0 "Stockpile Policy"
 concept_ase_stockpile_policy_desc:0 "A combination of various means to control [Concept('concept_ase_market_stockpile', 'Stockpiling')]: allowed [Concept('concept_ase_stockpile_transfer', 'Transfers')], maximum [Concept('concept_ase_stockpile_capacity', 'Capacity')], [Concept('concept_ase_stockpile_price_target', 'Price Targets')], [concept_state]-level priorities etc."
 
 concept_ase_stockpile_capacity:0 "Stockpile Capacity"
 concept_ase_stockpile_capacity_desc:0 "A [Concept('concept_ase_stockpile_reserve', 'Reserve')] of [Concept('concept_good', 'Goods')] that can be stored in a [Concept('concept_ase_market_stockpile', 'Stockpile')] of a [concept_country]. It is based on #bold Market Volume#! of [Concept('concept_good', 'Goods')], which equals #bold 25% of #![concept_sell_orders]#bold  + 75% of #![concept_buy_orders], multiplied by a certain number of #bold months#! set by the [concept_market_owner].\n\nIn other words, if #bold Capacity#! is set to #bold 6 months#!, it roughly means the [Concept('concept_ase_market_stockpile', 'Stockpile')] can contain the amount of [Concept('concept_good', 'Goods')] your [concept_market] consumes over #bold 6 months#!.\n\nThis means #bold Stockpile Capacity#! is not just some arbitrary value, but rather an indication of how important the [Concept('concept_good', 'Goods')] are for the [concept_market]."
 
 concept_ase_stockpile_price_target:0 "Stockpile Price Target"
 concept_ase_stockpile_price_target_desc:0 "The [concept_market_price] that the [Concept('concept_ase_market_stockpile', 'Stockpile')] aims to maintain when doing a [Concept('concept_ase_stockpile_transfer', 'Transfer')].\n\n[Concept('concept_ase_stockpile_transfer', 'Saving')] will start if the [Concept('concept_market_price', 'Price')] fells below #bold Saving Target#!, and [Concept('concept_ase_stockpile_transfer', 'Spending')] will start if the [Concept('concept_market_price', 'Price')] rises above #bold Spending Target#!. In both cases [Concept('concept_ase_market_stockpile', 'Stockpile')] will aim to buy or sell the amount of [Concept('concept_good', 'Goods')] required for the [Concept('concept_market_price', 'Price')] to reach the #bold Target#!."

 ASE_STOCKPILE_EXISTING_RESERVE:0 "[Concept('concept_ase_market_stockpile', 'Stockpile')] of [Goods.GetMarket.GetName] contains [Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_reserve_', Goods.GetKey)), '(CFixedPoint)10')|Dv] of [Goods.GetName]"
 ASE_STOCKPILE_ONGOING_TRANSFER_SAVING:0 "$ASE_STOCKPILE_EXISTING_RESERVE$\nCurrent [Concept('concept_ase_stockpile_transfer', 'Transfer')] equals [Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D] every week"
 ASE_STOCKPILE_ONGOING_TRANSFER_SPENDING:0 "$ASE_STOCKPILE_EXISTING_RESERVE$\nCurrent [Concept('concept_ase_stockpile_transfer', 'Transfer')] equals [Multiply_CFixedPoint(GuiScope.SetRoot(Goods.GetMarket.GetOwner.MakeScope).ScriptValue(Concatenate('ase_stockpile_market_transfer_', Goods.GetKey)), '(CFixedPoint)0.1')|=+D] every week"
 ASE_STOCKPILE_NO_ONGOING_TRANSFER:0 "$ASE_STOCKPILE_EXISTING_RESERVE$\nCurrently no [Concept('concept_ase_stockpile_transfer', 'Transfer')] is happening"

 ASE_MARKET_STOCKPILE:0 "[concept_ase_market_stockpile]"
 ASE_COUNTRY_STOCKPILE:0 "[concept_ase_country_stockpile]"
 ASE_STATE_STOCKPILE:0 "[concept_ase_state_stockpile]"

 ASE_STOCKPILE_STATES_IN_MARKET:0 "[Concept('concept_state', 'States')] in [Goods.GetMarket.GetName] with the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [Goods.GetName]"
 ASE_STOCKPILE_SHOW_STATES_IN_COUNTRY:0 "#bold #underline Show states in our country only#!#!"
 ASE_STOCKPILE_STATES_IN_COUNTRY:0 "[Concept('concept_state', 'States')] in [GetPlayer.GetName] with the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [Goods.GetName]"
 ASE_STOCKPILE_COUNTRIES_IN_MARKET:0 "[Concept('concept_country', 'Countries')] in [Goods.GetMarket.GetName] with the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [Goods.GetName]"

 ASE_STOCKPILE_SECTION_GOODS_POLICY:0 "[Concept('concept_ase_stockpile_policy', 'Stockpiling of')] [Goods.GetName]"
 ASE_STOCKPILE_SECTION_DEFAULT_POLICY:0 "[Concept('concept_ase_stockpile_policy', 'Default Stockpile Policy')]"
 ASE_STOCKPILE_SECTION_STATE_POLICY:0 "[Concept('concept_ase_stockpile_policy', 'Stockpiling in')] [GoodsStatePanel.GetGoods.GetState.GetName]"

 ASE_STOCKPILE_TRANSFERS:0 "[Concept('concept_ase_stockpile_transfer', 'Transfers')]"
 ASE_STOCKPILE_TRANSFERS_BOTH:0 "Set [Concept('concept_ase_stockpile_transfer', 'Stockpile Transfers')] to [Concept('concept_ase_stockpile_transfer', 'Saving and Spending')]"
 ASE_STOCKPILE_TRANSFERS_SAVING:0 "Set [Concept('concept_ase_stockpile_transfer', 'Stockpile Transfers')] to only [Concept('concept_ase_stockpile_transfer', 'Saving')]"
 ASE_STOCKPILE_TRANSFERS_SPENDING:0 "Set [Concept('concept_ase_stockpile_transfer', 'Stockpile Transfers')] to only [Concept('concept_ase_stockpile_transfer', 'Spending')]"
 ASE_STOCKPILE_TRANSFERS_NONE:0 "Set [Concept('concept_ase_stockpile_transfer', 'Stockpile Transfers')] to [Concept('concept_ase_stockpile_transfer', 'None')]"
 ASE_STOCKPILE_TRANSFERS_BOTH_TOOLTIP:0 "Allow to both [Concept('concept_ase_stockpile_transfer', 'Save and Spend')] [Goods.GetName] in the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [GetPlayer.GetName]"
 ASE_STOCKPILE_TRANSFERS_SAVING_TOOLTIP:0 "Allow to only [Concept('concept_ase_stockpile_transfer', 'Save')] [Goods.GetName] in the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [GetPlayer.GetName]"
 ASE_STOCKPILE_TRANSFERS_SPENDING_TOOLTIP:0 "Allow to only [Concept('concept_ase_stockpile_transfer', 'Spend')] [Goods.GetName] in the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [GetPlayer.GetName]"
 ASE_STOCKPILE_TRANSFERS_NONE_TOOLTIP:0 "Prohibit to [Concept('concept_ase_stockpile_transfer', 'Save and Spend')] [Goods.GetName] in the [Concept('concept_ase_market_stockpile', 'Stockpile')] of [GetPlayer.GetName]"

 ASE_STOCKPILE_NOT_OWNER:0 "@red_cross! [concept_ase_market_stockpile] in the [Goods.GetMarket.GetName] is managed by [Goods.GetMarket.GetOwner.GetName].\n\nAs a [Concept('concept_junior_partner', 'Junior Market Partner')], you are limited to choosing if you agree to [Concept('concept_ase_stockpile_transfer', 'Transfer')] [Goods.GetName] on these terms or not by adjusting your [Concept('concept_ase_stockpile_transfer', 'Stockpile Transfers')]."

 ASE_STOCKPILE_CAPACITY:0 "[Concept('concept_ase_stockpile_capacity', 'Capacity')]"
 ASE_STOCKPILE_CAPACITY_MONTHS:0 " months"
 ASE_STOCKPILE_CAPACITY_LOWEST:0 "@red_cross! [concept_ase_stockpile_capacity] can't be any lower"
 ASE_STOCKPILE_CAPACITY_LOWER:0 "Decrease [concept_ase_stockpile_capacity] by #variable 3 months#!"
 ASE_STOCKPILE_CAPACITY_HIGHEST:0 "@red_cross! [concept_ase_stockpile_capacity] can't be any higher"
 ASE_STOCKPILE_CAPACITY_HIGHER:0 "Increase [concept_ase_stockpile_capacity] by #variable 3 months#!"

 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING:0 "[Concept('concept_ase_stockpile_price_target', 'Saving Target')]"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_LOWEST:0 "@red_cross! [concept_ase_stockpile_price_target] can't be any lower"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_LOWER:0 "Decrease [concept_ase_stockpile_price_target] by #variable 5%#!"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_HIGHEST:0 "@red_cross! [concept_ase_stockpile_price_target] can't be any higher"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SAVING_HIGHER:0 "Increase [concept_ase_stockpile_price_target] by #variable 5%#!"

 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING:0 "[Concept('concept_ase_stockpile_price_target', 'Spending Target')]"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_LOWEST:0 "@red_cross! [concept_ase_stockpile_price_target] can't be any lower"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_LOWER:0 "Decrease [concept_ase_stockpile_price_target] by #variable 5%#!"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_HIGHEST:0 "@red_cross! [concept_ase_stockpile_price_target] can't be any higher"
 ASE_STOCKPILE_COUNTRY_PRICE_TARGET_SPENDING_HIGHER:0 "Increase [concept_ase_stockpile_price_target] by #variable 5%#!"

 ASE_STOCKPILE_NONE:0 "#variable None#!"
 ASE_STOCKPILE_NONE_TOOLTIP:0 "@red_cross! [Goods.GetMarket.GetOwner.GetName], owner of [Goods.GetMarket.GetName], decided against [Concept('concept_ase_market_stockpile', 'Stockpiling')] of [Goods.GetName] under any conditions"

 ASE_STOCKPILE_RESET_SPECIFIC:0 "Reset @[Goods.GetKey]! only"
 ASE_STOCKPILE_RESET_SPECIFIC_TOOLTIP:0 "Reset this setting for [Goods.GetName] to #bold Default#! value"
 ASE_STOCKPILE_RESET_ALL_GOODS:0 "Reset all goods"
 ASE_STOCKPILE_RESET_ALL_GOODS_TOOLTIP:0 "Reset this setting for all [Concept('concept_good', 'Goods')] that have it changed to #bold Default#! value"
 ASE_STOCKPILE_RESET_CONFIRM:0 "#r #bold Are you sure?#!#!"
 ASE_STOCKPILE_RESET_STATE_SPECIFIC_TOOLTIP:0 "Reset all settings for [Goods.GetName] in [GoodsStatePanel.GetGoods.GetState.GetName] to #bold Default#! values"
 ASE_STOCKPILE_RESET_STATE_ALL_GOODS_TOOLTIP:0 "Reset all settings for all [Concept('concept_good', 'Goods')] that have them changed in [GoodsStatePanel.GetGoods.GetState.GetName] to #bold Default#! values"

 ASE_STOCKPILE_ONLY_FOR_SPECIFIC:0 "#gold Only for#! @[Goods.GetKey]!"
 ASE_STOCKPILE_ONLY_FOR_SPECIFIC_TOOLTIP:0 "Affects only [Concept('concept_ase_market_stockpile', 'Stockpiling')] of [Goods.GetName] in [GoodsStatePanel.GetGoods.GetState.GetName]"
 ASE_STOCKPILE_FOR_ALL_GOODS:0 "#gold Default#!"
 ASE_STOCKPILE_FOR_ALL_GOODS_TOOLTIP:0 "Affects [Concept('concept_ase_market_stockpile', 'Stockpiling')] of all [Concept('concept_good', 'Goods')] in [GoodsStatePanel.GetGoods.GetState.GetName]"

 ASE_STOCKPILE_PRIORITY:0 "Priority"
 ASE_STOCKPILE_PRIORITY_TOOLTIP:0 "Prioritize [GoodsStatePanel.GetGoods.GetState.GetName] for [Concept('concept_ase_stockpile_transfer', 'Saving Transfers')] of [Goods.GetName], increasing the share of [Concept('concept_good', 'Goods')] it gets compared to other [Concept('concept_state', 'States')].\n\nIf #bold Stockpiling States#! game rule is below #bold 100%#!, this [concept_state] will also be considered for [Concept('concept_ase_stockpile_transfer', 'Saving Transfers')] before others regardless of its GDP share.\n\n[concept_capital_state] is prioritized by default."
 
 ase_remove_everything_related_to_stockpiling:0 "[Concept('concept_ase_mod_description', 'ASE')] | Remove everything related to stockpiling"
 ase_remove_everything_related_to_stockpiling_desc:0 "Taking this decision is required if you want to remove ASE from this playthrough, otherwise you'll encounter various problems. You'll need to exit the game and disable the mod right after that."